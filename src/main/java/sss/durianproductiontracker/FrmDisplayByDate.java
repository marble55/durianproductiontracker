/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package sss.durianproductiontracker;

import java.time.LocalDate;
import java.time.Month;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author USER
 */
public class FrmDisplayByDate extends javax.swing.JFrame {

    /**
     * Creates new form FrmDisplayByDate
     */
    public FrmDisplayByDate() {
        initComponents();
        
        }
    
    public FrmDisplayByDate(int year, int month, int date) {
        initComponents();
        jLabel1.setText("Batch of " + month + "/" + date + "/" + year );
        populateTableReceived(year, month, date);
        populateTableOpened(year, month, date);
        populateTablePackaged(year, month, date);
        populateTableSeparated(year, month, date);
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane5 = new javax.swing.JScrollPane();
        jTable5 = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTable6 = new javax.swing.JTable();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTableReceived = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableOpened = new javax.swing.JTable();
        jScrollPane9 = new javax.swing.JScrollPane();
        jTablePackaged = new javax.swing.JTable();
        jScrollPane10 = new javax.swing.JScrollPane();
        jTableSeparated = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        jTable5.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Date Recieved", "Variety", "Quality", "Harvest Type", "Fruit Weight", "Recieved Pieces", "Current Process", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(jTable5);

        jTable6.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Date Recieved", "Variety", "Quality", "Harvest Type", "Fruit Weight", "Recieved Pieces", "Current Process", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane6.setViewportView(jTable6);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTableReceived.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Date Recieved", "Variety", "Quality", "Harvest Type", "Fruit Weight", "Recieved Pieces", "Current Process", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane8.setViewportView(jTableReceived);

        jTabbedPane1.addTab("Received", jScrollPane8);

        jTableOpened.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Date Opened", "Date Recieved", "Variety", "Quality", "Harvest Type", "Pulp Weight", "Opened Pieces", "Current Process", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTableOpened);

        jTabbedPane1.addTab("Opened", jScrollPane1);

        jTablePackaged.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Date Packaged", "Date Opened", "Date Recieved", "Variety", "Quality", "Harvest Type", "Pieces Packaged", "Current Process", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane9.setViewportView(jTablePackaged);

        jTabbedPane1.addTab("Packaged", jScrollPane9);

        jTableSeparated.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Date Separated", "Date Opened", "Date Recieved", "Variety", "Quality", "Harvest Type", "Color", "Meat w/ Seeds", "Meat w/o Seeds", "Current Process", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane10.setViewportView(jTableSeparated);

        jTabbedPane1.addTab("Separated", jScrollPane10);

        jButton2.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jButton2.setText("RETURN");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Batches of <DATE>");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(491, 491, 491)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(397, 397, 397)
                        .addComponent(jLabel1)))
                .addContainerGap(83, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 536, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void populateTableSeparated(int year, int month, int date){
        DefaultTableModel tblModel = (DefaultTableModel)jTableSeparated.getModel();
        
        LocalDate dateSearch = LocalDate.of(year, month, date);
        int count = 0;
        
        while(count != separationController.SList.getList().size()){
            
            if(separationController.SList.getList().get(count).equalsDate(dateSearch) != false){
            
            tblModel.addRow(new Object[] {separationController.SList.getList().get(count).getDateSeparation(),
                                        separationController.SList.getList().get(count).getDateOpened(),
                                        separationController.SList.getList().get(count).getDateRecieved(),
                                        separationController.SList.getList().get(count).getVrty(),
                                        separationController.SList.getList().get(count).getQlty(),
                                        separationController.SList.getList().get(count).getHtype(),                                       
                                        separationController.SList.getList().get(count).getcolor(),
                                        separationController.SList.getList().get(count).getMeatWithSeed() + " kg",
                                        separationController.SList.getList().get(count).getMeatWithoutSeed() + " kg",
                                        "In Separation", "Completed"});
            }
            count++;
          
        }
    }
    
    public void populateTablePackaged(int year, int month, int date){
        DefaultTableModel tblModel = (DefaultTableModel)jTablePackaged.getModel();
        
        LocalDate dateSearch = LocalDate.of(year, month, date);
        int count = 0;
        
        while(count != packagingController.PList.getList().size()){
            
            if(packagingController.PList.getList().get(count).equalsDate(dateSearch) != false){
            
            tblModel.addRow(new Object[] {packagingController.PList.getList().get(count).getDatePackaged(),
                                        packagingController.PList.getList().get(count).getDateOpened(),
                                        packagingController.PList.getList().get(count).getDateRecieved(),
                                        packagingController.PList.getList().get(count).getVrty(),
                                        packagingController.PList.getList().get(count).getQlty(),
                                        packagingController.PList.getList().get(count).getHtype(),                                       
                                        packagingController.PList.getList().get(count).getPcsPackaged(),
                                        "In Packaging", "Completed"});
            }
            count++;
          
        }
    }
    
    public void populateTableOpened(int year, int month, int date){
        DefaultTableModel tblModel = (DefaultTableModel)jTableOpened.getModel();
        
        LocalDate dateSearch = LocalDate.of(year, month, date);
        int count = 0;
        
        while(count != openedController.OList.getList().size()){
            
            if(openedController.OList.getList().get(count).equalsDate(dateSearch) != false){
            String current = "";
            String status = "";
            int val = openedController.OList.getCurrentProcess(openedController.OList.getList().get(count));
            
            switch (val){
                case 0:
                    current = "In Opening";
                    break;
                case 1:
                    current = "In Packaging";
                    break;
                case 2:
                    current = "In Separation";
                    break;
            }
            
            if (val > 0){
                status = "Completed";
            }
            else
                status = "Not Completed";
            
            tblModel.addRow(new Object[] {openedController.OList.getList().get(count).getDateOpened(),
                                        openedController.OList.getList().get(count).getDateRecieved(),
                                        openedController.OList.getList().get(count).getVrty(),
                                        openedController.OList.getList().get(count).getQlty(),
                                        openedController.OList.getList().get(count).getHtype(),
                                        openedController.OList.getList().get(count).getPulpWeight(),
                                        openedController.OList.getList().get(count).getPcsOpened(),
                                        current, status});
            }
            count++;
          
        }
    }
    
    public void populateTableReceived(int year, int month, int date){
        DefaultTableModel tblModel = (DefaultTableModel)jTableReceived.getModel();
        
        LocalDate dateSearch = LocalDate.of(year, month, date);
        int count = 0;
        
        while(count != recievedController.RList.getList().size()){
            
            if(recievedController.RList.getList().get(count).equalsDate(dateSearch) != false){
                String current = "";
                String status = "";
                int val = recievedController.RList.getCurrentProcess(recievedController.RList.getList().get(count));

                switch (val){
                    case 0: 
                        current = "In Recieving";
                        break;
                    case 1:
                        current = "In Opening";
                        break;
                    case 2:
                        current = "In Packaging";
                        break;
                    case 3:
                        current = "In Separation";
                        break;
                }

                if (val > 1){
                    status = "Completed";
                }
                else
                    status = "Not Completed";

                tblModel.addRow(new Object[] {recievedController.RList.getList().get(count).getDateRecieved(),
                                            recievedController.RList.getList().get(count).getVrty(),
                                            recievedController.RList.getList().get(count).getQlty(),
                                            recievedController.RList.getList().get(count).getHtype(),
                                            recievedController.RList.getList().get(count).getfrtWeight(),
                                            recievedController.RList.getList().get(count).getPieces(),
                                            current, status});
                        
            }
            count++;  
        }
    }
    
    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmDisplayByDate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmDisplayByDate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmDisplayByDate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmDisplayByDate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmDisplayByDate().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable5;
    private javax.swing.JTable jTable6;
    private javax.swing.JTable jTableOpened;
    private javax.swing.JTable jTablePackaged;
    private javax.swing.JTable jTableReceived;
    private javax.swing.JTable jTableSeparated;
    // End of variables declaration//GEN-END:variables
}
