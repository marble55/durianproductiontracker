/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package sss.durianproductiontracker;

import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author USER
 */
public class FrmDisplayBatches extends javax.swing.JFrame {

    /**
     * Creates new form FrmDisplayBatches
     */
    DefaultTableModel tblModel;
    
    public FrmDisplayBatches() {
        initComponents();
        populateTableReceived();
        populateTableOpened();
        populateTablePackaged();
        populateTableSeparated();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    public void populateTableSeparated(){
       tblModel = (DefaultTableModel)jTableSeparated.getModel();
        
      int count = 0;
        
      while(count != separationController.SList.getList().size()){
            
            
         tblModel.addRow(new Object[] {separationController.SList.getList().get(count).getDateSeparation(),
                                        separationController.SList.getList().get(count).getDateOpened(),
                                        separationController.SList.getList().get(count).getDateRecieved(),
                                        separationController.SList.getList().get(count).getVrty(),
                                        separationController.SList.getList().get(count).getQlty(),
                                        separationController.SList.getList().get(count).getHtype(),                                       
                                        separationController.SList.getList().get(count).getcolor(),
                                        separationController.SList.getList().get(count).getMeatWithSeed() + " kg",
                                        separationController.SList.getList().get(count).getMeatWithoutSeed() + " kg",
                                        "In Separation", "Completed"});
         count++;
          
      }
   }
    
   public void populateTablePackaged(){
      DefaultTableModel tblModel = (DefaultTableModel)jTablePackaged.getModel();
        
      int count = 0;
        
      while(count != packagingController.PList.getList().size()){
            
            
         tblModel.addRow(new Object[] {packagingController.PList.getList().get(count).getDatePackaged(),
                                        packagingController.PList.getList().get(count).getDateOpened(),
                                        packagingController.PList.getList().get(count).getDateRecieved(),
                                        packagingController.PList.getList().get(count).getVrty(),
                                        packagingController.PList.getList().get(count).getQlty(),
                                        packagingController.PList.getList().get(count).getHtype(),                                       
                                        packagingController.PList.getList().get(count).getPcsPackaged(),
                                        "In Packaging", "Completed"});
         count++;
          
      }
   }
    
   public void populateTableOpened(){
       tblModel = (DefaultTableModel)jTableOpened.getModel();
        
      int count = 0;
        
      while(count != openedController.OList.getList().size()){
         String current = "";
         String status = "";
         int val = openedController.OList.getCurrentProcess(openedController.OList.getList().get(count));
            
         switch (val){
            case 0:
               current = "In Opening";
               break;
            case 1:
               current = "In Packaging";
               break;
            case 2:
               current = "In Separation";
               break;
         }
            
         if (val > 0){
            status = "Completed";
         }
         else
            status = "Not Completed";
            
         tblModel.addRow(new Object[] {openedController.OList.getList().get(count).getDateOpened(),
                                        openedController.OList.getList().get(count).getDateRecieved(),
                                        openedController.OList.getList().get(count).getVrty(),
                                        openedController.OList.getList().get(count).getQlty(),
                                        openedController.OList.getList().get(count).getHtype(),
                                        openedController.OList.getList().get(count).getPulpWeight(),
                                        openedController.OList.getList().get(count).getPcsOpened(),
                                        current, status});
         count++;
          
      }
   }
    
   public void populateTableReceived(){
       tblModel = (DefaultTableModel)jTableReceived.getModel();
        
      int count = 0;
        
        while(count != recievedController.RList.getList().size()){
            String current = "";
            String status = "";
            int val = recievedController.RList.getCurrentProcess(recievedController.RList.getList().get(count));
            
            switch (val){
                case 0: 
                    current = "In Recieving";
                    break;
                case 1:
                    current = "In Opening";
                    break;
                case 2:
                    current = "In Packaging";
                    break;
                case 3:
                    current = "In Separation";
                    break;
            }
            
            if (val > 1){
                status = "Completed";
            }
            else
                status = "Not Completed";
            
            tblModel.addRow(new Object[] {recievedController.RList.getList().get(count).getDateRecieved(),
                                        recievedController.RList.getList().get(count).getVrty(),
                                        recievedController.RList.getList().get(count).getQlty(),
                                        recievedController.RList.getList().get(count).getHtype(),
                                        recievedController.RList.getList().get(count).getfrtWeight(),
                                        recievedController.RList.getList().get(count).getPieces(),
                                        current, status});
            count++;
          
      }
   }
   
   private void filter(String query){
       TableRowSorter<DefaultTableModel> tr = new TableRowSorter<DefaultTableModel> (tblModel);
       jTableReceived.setRowSorter(tr);
       
       tr.setRowFilter(RowFilter.regexFilter(query));
   }
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTableReceived = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableOpened = new javax.swing.JTable();
        jScrollPane9 = new javax.swing.JScrollPane();
        jTablePackaged = new javax.swing.JTable();
        jScrollPane10 = new javax.swing.JScrollPane();
        jTableSeparated = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        SearchTxt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTableReceived.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Date Recieved", "Variety", "Quality", "Harvest Type", "Fruit Weight", "Recieved Pieces", "Current Process", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane8.setViewportView(jTableReceived);

        jTabbedPane1.addTab("Received", jScrollPane8);

        jTableOpened.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Date Opened", "Date Recieved", "Variety", "Quality", "Harvest Type", "Pulp Weight", "Opened Pieces", "Current Process", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTableOpened);

        jTabbedPane1.addTab("Opened", jScrollPane1);

        jTablePackaged.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Date Packaged", "Date Opened", "Date Recieved", "Variety", "Quality", "Harvest Type", "Pieces Packaged", "Current Process", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane9.setViewportView(jTablePackaged);

        jTabbedPane1.addTab("Packaged", jScrollPane9);

        jTableSeparated.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Date Separated", "Date Opened", "Date Recieved", "Variety", "Quality", "Harvest Type", "Color", "Meat w/ Seeds", "Meat w/o Seeds", "Current Process", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane10.setViewportView(jTableSeparated);

        jTabbedPane1.addTab("Separated", jScrollPane10);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("All Batches");

        jButton2.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jButton2.setText("RETURN");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        SearchTxt.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        SearchTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchTxtActionPerformed(evt);
            }
        });
        SearchTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                SearchTxtKeyReleased(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel2.setText("Search:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1035, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(433, 433, 433)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(SearchTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(63, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(474, 474, 474))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel1)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SearchTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 496, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void SearchTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchTxtActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_SearchTxtActionPerformed

    private void SearchTxtKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_SearchTxtKeyReleased
        // TODO add your handling code here:
        DefaultTableModel obj =(DefaultTableModel) jTableReceived.getModel();
        TableRowSorter<DefaultTableModel> obj1 = new TableRowSorter<>(obj);
        jTableReceived.setRowSorter(obj1);
        obj1.setRowFilter(RowFilter.regexFilter(SearchTxt.getText()));
        
        DefaultTableModel obj2 =(DefaultTableModel) jTableOpened.getModel();
        TableRowSorter<DefaultTableModel> obj3 = new TableRowSorter<>(obj2);
        jTableOpened.setRowSorter(obj3);
        obj3.setRowFilter(RowFilter.regexFilter(SearchTxt.getText()));
        
        DefaultTableModel obj4 =(DefaultTableModel) jTablePackaged.getModel();
        TableRowSorter<DefaultTableModel> obj5 = new TableRowSorter<>(obj4);
        jTablePackaged.setRowSorter(obj5);
        obj5.setRowFilter(RowFilter.regexFilter(SearchTxt.getText()));
        
        DefaultTableModel obj6 =(DefaultTableModel) jTableSeparated.getModel();
        TableRowSorter<DefaultTableModel> obj7 = new TableRowSorter<>(obj6);
        jTableSeparated.setRowSorter(obj7);
        obj7.setRowFilter(RowFilter.regexFilter(SearchTxt.getText()));
    }//GEN-LAST:event_SearchTxtKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmDisplayBatches.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmDisplayBatches.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmDisplayBatches.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmDisplayBatches.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmDisplayBatches().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField SearchTxt;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTableOpened;
    private javax.swing.JTable jTablePackaged;
    private javax.swing.JTable jTableReceived;
    private javax.swing.JTable jTableSeparated;
    // End of variables declaration//GEN-END:variables
}
